#!/usr/bin/env bash
set -euo pipefail

# shellcheck disable=SC2034
VERSION="1.4.3"
RAYMON_TAP="raymonepping"

# For Homebrew-installed CLI, always start with Homebrew prefix!
HOMEBREW_PREFIX="$(brew --prefix 2>/dev/null || true)"

POSSIBLE_LIB_DIRS=(
  "$HOMEBREW_PREFIX/share/brew-brain-cli/lib"
  "$HOMEBREW_PREFIX/opt/brew-brain-cli/share/brew-brain-cli/lib"
  "./lib"
)
LIB_DIR=""
for d in "${POSSIBLE_LIB_DIRS[@]}"; do
  if [[ -d "$d" ]]; then
    LIB_DIR="$d"
    break
  fi
done
if [[ -z "$LIB_DIR" ]]; then
  echo "‚ùå Could not locate lib/ directory. Searched: ${POSSIBLE_LIB_DIRS[*]}"
  exit 1
fi

POSSIBLE_TPL_DIRS=(
  "$HOMEBREW_PREFIX/share/brew-brain-cli/tpl"
  "$HOMEBREW_PREFIX/opt/brew-brain-cli/share/brew-brain-cli/tpl"
  "./tpl"
)
TPL_DIR=""
for t in "${POSSIBLE_TPL_DIRS[@]}"; do
  if [[ -d "$t" ]]; then
    TPL_DIR="$t"
    break
  fi
done
if [[ -z "$TPL_DIR" ]]; then
  echo "‚ùå Could not locate tpl/ directory. Searched: ${POSSIBLE_TPL_DIRS[*]}"
  exit 1
fi

FUNCTIONS_PATH="$LIB_DIR/brew_brain_functions.sh"
if [[ -f "$FUNCTIONS_PATH" ]]; then
  source "$FUNCTIONS_PATH"
else
  echo "‚ùå Could not locate brew_brain_functions.sh at: $FUNCTIONS_PATH"
  exit 1
fi

# --- Check jq availability ---
if ! command -v jq &>/dev/null; then
  echo "‚ùå This script requires 'jq'. Install it with: brew install jq"
  exit 1
fi

# --- CLI defaults ---
CONFIG_FILE="${HOME}/.brew_brain.json"
ACTION="human"
OUTPUT=""
OUTPUT_FILE=""

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# --- Dump/fog passthrough (before regular CLI parsing) ---
if [[ $# -ge 1 && ("$1" == "--dump" || "$1" == "--fog" || "$1" == "fog") ]]; then
  DUMP_CMD=""
  SEARCH_DUMP_PATHS=(
    "$LIB_DIR/brew_brain_dump.sh"
    "$SCRIPT_DIR/../lib/brew_brain_dump.sh"
    "$SCRIPT_DIR/lib/brew_brain_dump.sh"
    "/opt/homebrew/share/brew-brain-cli/lib/brew_brain_dump.sh"
  )
  for path in "${SEARCH_DUMP_PATHS[@]}"; do
    if [[ -f "$path" ]]; then
      DUMP_CMD="$path"
      break
    fi
  done
  if [[ -z "$DUMP_CMD" ]]; then
    echo "‚ùå Could not find brew_brain_dump.sh in: ${SEARCH_DUMP_PATHS[*]}"
    exit 1
  fi
  exec "$DUMP_CMD" "${@:2}"
  exit 0
fi

# --- Standard CLI parsing ---
while [[ $# -gt 0 ]]; do
  case "$1" in
  --config)
    CONFIG_FILE="${2:-}"
    shift 2
    ;;
  --refresh)
    ACTION="refresh"
    shift
    ;;
  --output)
    OUTPUT="${2:-}"
    ACTION="render"
    shift 2
    ;;
  --output-file)
    OUTPUT_FILE="${2:-}"
    shift 2
    ;;
  doctor)
    [[ "${2:-}" == "Raymon" ]] && ACTION="doctor" || ACTION="unknown"
    shift
    ;;
  checkup)
    ACTION="checkup"
    shift
    ;;
  --version)
    echo "raymon-brews v$VERSION"
    exit 0
    ;;
  --help)
    cat <<EOF
üß† brew_brain v$VERSION ‚Äì Manage your Raymon Homebrew CLI arsenal

USAGE:
  ./brew_brain [COMMAND] [OPTIONS]

COMMANDS:
  --refresh               üîÑ  Fetch latest versions of installed Raymon CLIs
  checkup                 ü©∫  Compare installed CLIs against config (see: --config)
  --output FORMAT         üì§  Output in alternate formats:
                             - md | markdown : Markdown table (templated)
                             - json          : JSON array (pretty + sorted)
                             - table         : Simple CLI table
  --output-file NAME      üìù  Write output to NAME.(md|json|txt) depending on --output
  --dump | --fog | fog    üß†  Generate (dump) the Homebrew arsenal .json using brain_dump
  --version               üìå  Print current version
  --help                  üìñ  Show this help message

OPTIONS:
  --silent                ü§´  Suppress all interactive or verbose output
  --config PATH           üîß  Use custom config file (default: .brew_brain.json)

EXAMPLE CONFIG (~/.config/brew_brain/.brew_brain.json):
{
  "expected": [
    "bump-version-cli",
    "commit-gh-cli",
    "folder-tree-cli"
  ],
  "install_command": "brew install raymonepping/{formula}"
}

EXAMPLES:
  ./brew_brain --refresh
  ./brew_brain checkup
  ./brew_brain --output markdown
  ./brew_brain --output json --output-file mybrews
  ./brew_brain --config ./my_config.json
  ./brew_brain --dump --filter=raymonepping --output=arsenal.json
  ./brew_brain fog --filter=raymonepping --output=my_brews.json

‚ú® Output formats are always pretty/sorted for JSON, and Markdown output uses your templates for headers, summaries, and tables.
EOF

    exit 0
    ;;
  *)
    shift
    ;;
  esac
done

if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "‚ùå Configuration file $CONFIG_FILE not found."
  exit 1
fi

# Load CLI data (supports .track=true)
if jq -e '.tools[] | select(.track == "true")' "$CONFIG_FILE" >/dev/null; then
  mapfile -t CLI_NAMES < <(jq -r '.tools[] | select(.track == "true") | .name' "$CONFIG_FILE")
else
  mapfile -t CLI_NAMES < <(jq -r '.tools[].name' "$CONFIG_FILE")
fi

# shellcheck disable=SC2034
EXPECTED=("${CLI_NAMES[@]}")

get_installed_brews

case "$ACTION" in
refresh)
  run_refresh
  ;;
doctor)
  run_doctor
  ;;
checkup)
  run_checkup
  ;;
render)
  case "$OUTPUT" in
  md | markdown)
    if [[ -n "$OUTPUT_FILE" ]]; then
      render_markdown >"${OUTPUT_FILE}.md"
      echo "üìÑ Markdown written to: ${OUTPUT_FILE}.md"
    else
      render_markdown
    fi
    ;;
  json)
    if [[ -n "$OUTPUT_FILE" ]]; then
      render_json >"${OUTPUT_FILE}.json"
      # Post-process: pretty-print and sort by .name
      jq 'sort_by(.name)' "${OUTPUT_FILE}.json" >"${OUTPUT_FILE}.tmp" && mv "${OUTPUT_FILE}.tmp" "${OUTPUT_FILE}.json"
      echo "üìÑ JSON written (sorted & pretty) to: ${OUTPUT_FILE}.json"
    else
      render_json | jq 'sort_by(.name)'
    fi
    ;;
  table)
    if [[ -n "$OUTPUT_FILE" ]]; then
      render_table >"${OUTPUT_FILE}.txt"
      echo "üìÑ Table output written to: ${OUTPUT_FILE}.txt"
    else
      render_table
    fi
    ;;
  *)
    echo "‚ùå Unknown output format: $OUTPUT"
    exit 1
    ;;
  esac
  ;;
*)
  render_human
  ;;
esac
